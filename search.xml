<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>栈(Stack)</title>
    <url>/2021/01/20/dataStructure-stack/</url>
    <content><![CDATA[<blockquote>
<p>数据结构和算法，和语言是无关的</p>
</blockquote>
<ul>
<li><p>栈的特点</p>
<ol>
<li>一种受限的线性表，后进先出(LIFO:last in first out)</li>
<li>其限制是仅允许在栈顶进行插入和删除运算</li>
</ol>
</li>
<li><p>函数调用栈</p>
<img src="/2021/01/20/dataStructure-stack/funcStack.png" class="" title="funcStack">
</li>
<li><p>栈结构面试<br>有六个元素6,5,4,3,2,1的顺序进栈，问下列哪一个不是合法的出栈序列？()</p>
<p>A. 5 4 3 6 1 2</p>
<p>B. 4 5 3 2 1 6</p>
<p><font color="#FF000">C. 3 4 6 5 2 1</font></p>
<p>D. 2 3 4 1 5 6</p>
  <img src="/2021/01/20/dataStructure-stack/stackInterview.png" class="" title="stackInterview">
</li>
<li><p>栈结构实现(基于数组)</p>
<ul>
<li><p>栈的常见操作</p>
<ul>
<li><p>push(element) : 添加一个新元素到栈顶</p>
</li>
<li><p>pop() : 移除栈顶元素，同时返回被移除元素</p>
</li>
<li><p>peek() : 返回栈顶的元素，不对栈做任何修改(不会移除栈顶元素，仅仅返回它)</p>
</li>
<li><p>isEmpty() : 如果栈里没有任何元素就返回true，否则返回false</p>
</li>
<li><p>size() : 返回栈里元素个数</p>
</li>
<li><p>toString() : 将栈结构的内容以字符形式返回</p>
</li>
</ul>
</li>
<li><p>栈的实现</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明栈</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 栈中属性</span></span><br><span class="line">    <span class="keyword">this</span>.items = [];</span><br><span class="line">    <span class="comment">// push 添加元素到栈顶</span></span><br><span class="line">    <span class="keyword">this</span>.push = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.items.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pop 移除栈顶元素, 同时返回移除的元素</span></span><br><span class="line">    <span class="keyword">this</span>.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// peek 返回栈顶元素</span></span><br><span class="line">    <span class="keyword">this</span>.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// isEmpty 栈里没有任何元素就返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pop 返回栈里元素个数</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将栈结构的内容以字符形式返回</span></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基于实现的栈通过小程序将10进制转为2进制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制转二进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DecToBin</span>(<span class="params">decNum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="comment">// 依次整除2, 余数即为2进制</span></span><br><span class="line">    <span class="keyword">while</span>(decNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        stack.push(decNum % <span class="number">2</span>);</span><br><span class="line">        decNum = <span class="built_in">Math</span>.floor(decNum / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将栈中的2进制拼接(例如 10进制4 转换后 栈中为[0,0,1])</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">        result += stack.pop();</span><br><span class="line">        <span class="comment">//debugger;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>数组(Array)</title>
    <url>/2021/01/17/dataStructure/</url>
    <content><![CDATA[<blockquote>
<p>数据结构和算法，和语言是无关的</p>
</blockquote>
<ul>
<li><p>底层数组特点</p>
<ol>
<li>数组中必须存放相同类型数据</li>
<li>申请数组的内存空间时，必须指定数组大小</li>
</ol>
</li>
<li><p>影响数组性能的要素</p>
<ol>
<li>数组扩容</li>
<li>元素位移</li>
</ol>
</li>
<li><p>数组扩容</p>
<ol>
<li>numA:16 ➡ 18</li>
<li>此时底层会申请一个新的，长度扩大1倍的数组  numB:32 []</li>
<li>将numA中的数据一个个拷贝到numB, 再依次添加17,18</li>
<li>将numA的内存释放(free)掉</li>
<li>java中ArrayList默认长度是10, 超出10之后继续add的话，数组扩容到15(10 + 10 &gt;&gt; 1 </li>
<li>参考自ArrayList源码private void grow(int minCapacity)</li>
</ol>
</li>
<li><p>元素位移</p>
<ol>
<li>在数组最前面插入元素时，元素一个个向后移动</li>
<li>在中间或者前面插入或者删除元素性能非常低</li>
</ol>
</li>
<li><p>既然有以上的缺点，为什么还要用数组</p>
<ol>
<li>因为在日常开发中, 数组存放到数组后，常用的是查找</li>
<li>由于有下标, 查找的速度非常快(O(1)的性能)</li>
</ol>
</li>
<li><p>JavaScript数组底层实现</p>
<ol>
<li><p>实际并不是数组，而是类似于hashMap</p>
</li>
<li><p>不同时期采用不同实现, 正靠近C的数组实现</p>
</li>
<li><p><a href="https://www.voidcanvas.com/javascript-array-evolution-performance/" target="_blank" rel="noopener">Diving deep into JavaScript array</a></p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>日常工作积累</title>
    <url>/2020/12/31/%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%E7%A7%AF%E7%B4%AF/</url>
    <content><![CDATA[<ol>
<li>关于MySQL Connector/J的别名问题<ul>
<li>ab AS  a_b在5.1以后取出的是ab</li>
<li><a href="https://bugs.mysql.com/bug.php?id=40256" target="_blank" rel="noopener">mysql_bugs</a></li>
<li><a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-installing-upgrading-5-1.html" target="_blank" rel="noopener">MySQL Connector/J 5.1.x</a></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>DB</category>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>Java面试集锦</title>
    <url>/2020/12/01/interview/</url>
    <content><![CDATA[<ol>
<li>认证一般如何设计和实现的？从性能方面考虑，不应该每次都访问DB</li>
</ol>
<ol start="2">
<li>如果采用Token，Token里一般都存放什么样的信息</li>
</ol>
<ol start="3">
<li>mave管理项目常用命令</li>
</ol>
<ol start="4">
<li>java list去除重复元素</li>
</ol>
<ol start="5">
<li>Linux修改文件权限命令</li>
</ol>
<ol start="6">
<li>package.json的作用</li>
</ol>
<ol start="7">
<li>jvm编译 自定义一个java.lang.String可以编译并运行么</li>
</ol>
<ol start="8">
<li>java Lamdar表达式的好处</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>面试</category>
      </categories>
  </entry>
</search>
